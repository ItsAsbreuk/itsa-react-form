{
    "project": {
        "name": "itsa-react-xxxxx",
        "description": "React-Component: xxxxx",
        "logo": "https://avatars0.githubusercontent.com/u/8314644?v=3&s=84",
        "version": "0.0.1"
    },
    "files": {
        "lib/component.jsx": {
            "name": "lib/component.jsx",
            "modules": {
                "itsa-react-form": 1
            },
            "classes": {
                "Form": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "itsa-react-form": {
            "name": "itsa-react-form",
            "submodules": {},
            "elements": {},
            "classes": {
                "Form": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/component.jsx",
            "line": 1,
            "description": "React-component: Form, which renders a focussable form based upon\nelements declared by `props.items`\n\nThe generated forms have `purecss` styles (see http://purecss.io), but you still need to load purecss\nyourself to get these styles activated.\n\n<i>Copyright (c) 2016 AcceleTrial - https://acceletrial.com</i><br>\nProprietary License\n\nUsing native elements:\nYou can use native elements by specifying a \"String\" to `component`.\nSome native elements can use innerHTML, innerText or children, by setting the property: `innerHTML`, `innerText` or `children.",
            "example": [
                "\nitems = [\n    {component: 'legend', innerHTML: '<b>Beautiful</b> items'},\n    {component: Input, props: {value: 'Clinton'}, label: \"name\", children: []},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ]\n];\n\nA special purpose would be to have multiple items in the same row or inside a fieldset. To achieve this, define the type as\n\"row\", \"control-row\" or \"fieldset\" (String) as well as the property `items`.",
                "\nitems = [\n    {component: Input, props: {value: 'Clinton'}, label: \"name\"},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ],\n    {\n        type: \"fieldset\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    },\n    {\n        type: \"row\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    }\n];"
            ],
            "since": "0.0.1"
        }
    },
    "classes": {
        "Form": {
            "name": "Form",
            "shortname": "Form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "itsa-react-form",
            "namespace": "",
            "file": "lib/component.jsx",
            "line": 1,
            "description": "React-component: Form, which renders a focussable form based upon\nelements declared by `props.items`\n\nThe generated forms have `purecss` styles (see http://purecss.io), but you still need to load purecss\nyourself to get these styles activated.\n\n<i>Copyright (c) 2016 AcceleTrial - https://acceletrial.com</i><br>\nProprietary License\n\nUsing native elements:\nYou can use native elements by specifying a \"String\" to `component`.\nSome native elements can use innerHTML, innerText or children, by setting the property: `innerHTML`, `innerText` or `children.",
            "example": [
                "\nitems = [\n    {component: 'legend', innerHTML: '<b>Beautiful</b> items'},\n    {component: Input, props: {value: 'Clinton'}, label: \"name\", children: []},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ]\n];\n\nA special purpose would be to have multiple items in the same row or inside a fieldset. To achieve this, define the type as\n\"row\", \"control-row\" or \"fieldset\" (String) as well as the property `items`.",
                "\nitems = [\n    {component: Input, props: {value: 'Clinton'}, label: \"name\"},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ],\n    {\n        type: \"fieldset\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    },\n    {\n        type: \"row\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    }\n];"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/component.jsx",
            "line": 76,
            "description": "The Component its children",
            "itemtype": "property",
            "name": "children",
            "type": "Object || Array",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 85,
            "description": "The classname for the container",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 94,
            "description": "Whether the focuscontainer is disabled (doesn't response to focusevents)",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 103,
            "description": "Whether a click on the container (outside its elements,\nshould lead into focussing the container",
            "itemtype": "property",
            "name": "focusOnContainerClick",
            "default": "false",
            "type": "Boolean",
            "since": "15.0.10",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 114,
            "description": "A `selector` or `index` of the focussable items that should get the initial focus.\nIn case of a selector, it might return multiple nodes: the one that is being used\nis determined by",
            "itemtype": "property",
            "name": "initialFocus",
            "type": "String|Number",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 125,
            "description": "In case `initialFocus` is a selector, it might return multiple nodes: the one that is being used.\nIn case of \"last\", it will return the last node.",
            "itemtype": "property",
            "name": "initialFocusIndex",
            "type": "Number|\"last\"",
            "default": "0",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 136,
            "description": "The list of the items that should be rendered. Each item consist of an object like this:\n{component: ReactComponent, props: this.props, label: \"mylabel\"},\nwhere the label is optional.\n\nIf an item is an array, then this row will become devided in the number of columns that equal the array-size.\nInside the array, there should be ONLY array-items, defining the content of the column,\n\nUsing native elements:\nYou can use native elements by specifying a \"String\" to `component`.\nSome native elements can use innerHTML, innerText or children, by setting the property: `innerHTML`, `innerText` or `children.",
            "example": [
                "\nitems = [\n    {component: 'legend', innerHTML: '<b>Beautiful</b> items'},\n    {component: Input, props: {value: 'Clinton'}, label: \"name\", children: []},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ]\n];\n\nA special purpose would be to have multiple items in the same row or inside a fieldset. To achieve this, define the type as\n\"row\", \"control-row\" or \"fieldset\" (String) as well as the property `items`.",
                "\nitems = [\n    {component: Input, props: {value: 'Clinton'}, label: \"name\"},\n    [\n        [ // column 1\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ],\n        [ // column 2\n            {component: Input, props: {value: 'Clinton'}, label: \"name\"}\n        ]\n    ],\n    {\n        type: \"fieldset\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    },\n    {\n        type: \"row\",\n        items: [\n            {component: Button, props: {buttonText: 'cancel'}},\n            {component: Button, props: {buttonText: 'save'}}\n        ]\n    }\n];"
            ],
            "itemtype": "property",
            "name": "items",
            "type": "Array",
            "default": "0",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 198,
            "description": "What key/keys are responsible for re-focussing `down`. Valid values are charcodes possible prepende with\na special key: 9 or `shift+9` or `ctrl+shift+9`. Multiple key combinations can be defined bydefining an array of keyDown-values.",
            "itemtype": "property",
            "name": "keyDown",
            "default": "9",
            "type": "String|number|Array",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 209,
            "description": "Whenever `keyEnter` is set, then the focus-container will become a `nested`- focuscontainer.\nNested focuscontainers will automaticcaly become focussable by their parent-container.\n\nThe `keyEnter` determines what key/keys are responsible for `entering` this container. Valid values are charcodes possible prepende with\na special key: 39 or `shift+39` or `ctrl+shift+39`. Multiple key combinations can be defined bydefining an array of keyUp-values.",
            "itemtype": "property",
            "name": "keyEnter",
            "type": "String|number|Array",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 222,
            "description": "The `keyLeave` determines what key/keys are responsible for `leaving` this container and go to the parent focus-container.\nValid values are charcodes possible prepende with\na special key: 39 or `shift+39` or `ctrl+shift+39`. Multiple key combinations can be defined bydefining an array of keyUp-values.",
            "itemtype": "property",
            "name": "keyLeave",
            "default": "27",
            "type": "String|number|Array",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 234,
            "description": "What key/keys are responsible for re-focussing `up`. Valid values are charcodes possible prepended with\na special key: 9 or `shift+9` or `ctrl+shift+9`. Multiple key combinations can be defined bydefining an array of keyUp-values.",
            "itemtype": "property",
            "name": "keyUp",
            "default": "\"shift+9\"",
            "type": "String|number|Array",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 245,
            "description": "Whether the loop the focus when the last/first item is reached.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "Boolean",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 255,
            "description": "Callback for when the component did mount.",
            "itemtype": "property",
            "name": "onMount",
            "type": "Function",
            "since": "15.0.8",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 264,
            "description": "Callback whenever the forms needs to submit (button[type=\"submit\"] gets pressed)",
            "itemtype": "property",
            "name": "onClick",
            "type": "Function",
            "since": "0.0.1",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 273,
            "description": "Callback whenever the forms needs to submit (button[type=\"reset\"] gets pressed)",
            "itemtype": "property",
            "name": "onClick",
            "type": "Function",
            "since": "0.0.1",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 282,
            "description": "Whether to focus on the next item whenever a `enter` is pressed on an input-element.",
            "itemtype": "property",
            "name": "refocusOnEnterInput",
            "default": "true",
            "type": "Boolean",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 292,
            "description": "Selector on which the focusmanager should check against when refocussing",
            "itemtype": "property",
            "name": "selector",
            "type": "String",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 301,
            "description": "Inline styles for the focus-container",
            "itemtype": "property",
            "name": "style",
            "type": "Object",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 310,
            "description": "The tabIndex",
            "itemtype": "property",
            "name": "tabIndex",
            "type": "Number",
            "since": "0.0.1",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 319,
            "description": "The transition-time when the window needs to be scrolled in order to get the focussable node into the view.",
            "itemtype": "property",
            "name": "transitionTime",
            "type": "Number",
            "since": "15.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 329,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormCols",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 353,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormCols",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 380,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormCols",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 410,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormCols",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 470,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormCols",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 499,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormElement",
            "return": {
                "description": "ReactComponent"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 547,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormRow",
            "return": {
                "description": "[ReactComponent]"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 588,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "createFormRow",
            "return": {
                "description": "[ReactComponent]"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        },
        {
            "file": "lib/component.jsx",
            "line": 619,
            "description": "React render-method --> renders the Component.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "ReactComponents"
            },
            "since": "2.0.0",
            "class": "Form",
            "module": "itsa-react-form"
        }
    ],
    "warnings": []
}